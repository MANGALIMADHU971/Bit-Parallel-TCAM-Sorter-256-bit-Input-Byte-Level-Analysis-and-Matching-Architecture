module idx_sorted_32to4 (
    input clk,
    input rst,
    input start,
    input [31:0] unsorted_data,
    input [3:0] search_key,
    input [3:0] xmask,
    output reg [31:0] sorted_data,
    output reg [7:0] match_lines,
    output reg done,
    output reg [23:0] sorted_indices,     // 8 indices × 3 bits = 24 bits
    output reg [23:0] unsorted_indices
);

    reg [3:0] data_array [0:7];           // 8 × 4-bit values
    reg [2:0] index_array [0:7];          // 8 × 3-bit indices

    reg [2:0] compare_idx;
    reg [3:0] pass_count;
    reg [3:0] temp_data;
    reg [2:0] temp_index;
    wire [7:0] internal_match;

    localparam IDLE = 2'b00, LOAD = 2'b01, SORT = 2'b10, DONE = 2'b11;
    reg [1:0] state;

    integer i;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            done <= 0;
            sorted_data <= 0;
            sorted_indices <= 0;
            match_lines <= 0;
            pass_count <= 0;
            compare_idx <= 0;
            unsorted_indices <= 24'b0;

            for (i = 0; i < 8; i = i + 1) begin
                data_array[i] <= 4'b0;
                index_array[i] <= i[2:0];
            end
        end else begin
            case (state)
                IDLE: begin
                    done <= 0;
                    if (start) begin
                        state <= LOAD;
                        compare_idx <= 0;
                        pass_count <= 0;
                    end
                end

                LOAD: begin
                    data_array[0] <= unsorted_data[3:0];
                    data_array[1] <= unsorted_data[7:4];
                    data_array[2] <= unsorted_data[11:8];
                    data_array[3] <= unsorted_data[15:12];
                    data_array[4] <= unsorted_data[19:16];
                    data_array[5] <= unsorted_data[23:20];
                    data_array[6] <= unsorted_data[27:24];
                    data_array[7] <= unsorted_data[31:28];

                    for (i = 0; i < 8; i = i + 1)
                        index_array[i] <= i[2:0];

                    unsorted_indices <= {3'd7, 3'd6, 3'd5, 3'd4, 3'd3, 3'd2, 3'd1, 3'd0};
                    state <= SORT;
                end

                SORT: begin
                    if (compare_idx < 7) begin
                        if (((data_array[compare_idx] & ~xmask) >
                             (data_array[compare_idx+1] & ~xmask))) begin
                            temp_data = data_array[compare_idx];
                            data_array[compare_idx] = data_array[compare_idx+1];
                            data_array[compare_idx+1] = temp_data;

                            temp_index = index_array[compare_idx];
                            index_array[compare_idx] = index_array[compare_idx+1];
                            index_array[compare_idx+1] = temp_index;
                        end
                        compare_idx <= compare_idx + 1;
                    end else begin
                        compare_idx <= 0;
                        pass_count <= pass_count + 1;
                        if (pass_count >= 7) begin
                            state <= DONE;
                        end
                    end
                end

                DONE: begin
                    sorted_data <= {
                        data_array[7], data_array[6], data_array[5], data_array[4],
                        data_array[3], data_array[2], data_array[1], data_array[0]
                    };
                    sorted_indices <= {
                        3'd0,index_array[7],3'd0, index_array[6],3'd0, index_array[5],3'd0, index_array[4],
                        3'd0,index_array[3],3'd0, index_array[2],3'd0, index_array[1],3'd0, index_array[0]
                    };
                    match_lines <= internal_match;
                    done <= 1;
                    if (!start)
                        state <= IDLE;
                end
            endcase
        end
    end

    // === TCAM Match Logic ===
    genvar j;
    generate
        for (j = 0; j < 8; j = j + 1) begin : tcam_array
            tcam_line_idx11 #(.KEY_WIDTH(4)) tcam_inst (
                .key(search_key),
                .stored_key(data_array[j]),
                .xmask(xmask),
                .match(internal_match[j])
            );
        end
    endgenerate

endmodule

// === TCAM Comparator ===
module tcam_line_idx11 #(
    parameter KEY_WIDTH = 4
)(
    input [KEY_WIDTH-1:0] key,
    input [KEY_WIDTH-1:0] stored_key,
    input [KEY_WIDTH-1:0] xmask,
    output match
);
    assign match = ~|((key ^ stored_key) & ~xmask);
endmodule
