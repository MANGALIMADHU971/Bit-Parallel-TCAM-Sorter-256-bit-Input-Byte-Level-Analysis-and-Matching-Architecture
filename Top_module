// === 8-bit TCAM Comparator ===
module tcam_line22 #(parameter KEY_WIDTH = 8)(
    input [KEY_WIDTH-1:0] key,
    input [KEY_WIDTH-1:0] stored_key,
    input [KEY_WIDTH-1:0] xmask,
    output match
);
    assign match = ~|((key ^ stored_key) & ~xmask);
endmodule

// === Main Module ===
module Bit_128to4_New (
    input clk,
    input rst,
    input start,
    input [255:0] unsorted_data,
    input [7:0] search_key,
    input [7:0] xmask,
    output reg [255:0] sorted_data,
    output reg [3:0] match_lines,
    output reg [7:0] sorted_indices,
    output reg [255:0] memory_out,
    output reg [255:0] byte_sorted_data,
    output reg [31:0] byte_sorted_indices,
    output [31:0] major_sorted_data_0,
    output [31:0] major_sorted_data_1,
    output [31:0] major_sorted_data_2,
    output [31:0] major_sorted_data_3,
    output [31:0] major_sorted_data_4,
    output [31:0] major_sorted_data_5,
    output [31:0] major_sorted_data_6,
    output [31:0] major_sorted_data_7,
    output [23:0] major_sorted_idx_0,
    output [23:0] major_sorted_idx_1,
    output [23:0] major_sorted_idx_2,
    output [23:0] major_sorted_idx_3,
    output [23:0] major_sorted_idx_4,
    output [23:0] major_sorted_idx_5,
    output [23:0] major_sorted_idx_6,
    output [23:0] major_sorted_idx_7,
    output reg done
);

    reg [31:0] data_array [0:7];
    reg [2:0] index_array [0:7];
    reg [2:0] compare_idx, pass_count, state;
    reg [31:0] temp;
    reg [2:0] temp_index;
    reg [31:0] memory [0:7];

    localparam IDLE = 2'b00, LOAD = 2'b01, SORT = 2'b10, WAIT_BYTE_SORT = 2'b11;

function [7:0] get_byte;
    input [31:0] word;
    input [1:0] idx;
    begin
        case (idx)
            2'd0: get_byte = word[31:24];
            2'd1: get_byte = word[23:16];
            2'd2: get_byte = word[15:8];
            2'd3: get_byte = word[7:0];
            default: get_byte = 8'd0;
        endcase
    end
endfunction

    function compare_words;
        input [31:0] a, b;
        reg [7:0] byte_a, byte_b;
        integer i;
        reg done_flag;
        begin
            compare_words = 0;
            done_flag = 0;
            for (i = 3; i >= 0; i = i - 1) begin
                if (!done_flag) begin
                    byte_a = get_byte(a, i) & ~xmask;
                    byte_b = get_byte(b, i) & ~xmask;
                    if (byte_a > byte_b) begin
                        compare_words = 1;
                        done_flag = 1;
                    end else if (byte_a < byte_b) begin
                        compare_words = 0;
                        done_flag = 1;
                    end
                end
            end
        end
    endfunction

    wire [31:0] sorted_bytes [0:7];
    wire [23:0] byte_indices [0:7];
    wire [7:0] done_bytes;
    wire [7:0] dummy_match;
    wire [7:0] dummy_unsorted;

    reg [31:0] major0, major1, major2, major3,major4,major5,major6,major7;

    wire [31:0] major_sorted_data [0:7];
    wire [23:0] major_sorted_indices [0:7];
    wire [7:0] major_sort_done;
    wire [7:0] major_sort_match;

    assign major_sorted_data_0 = major_sorted_data[0];
    assign major_sorted_data_1 = major_sorted_data[1];
    assign major_sorted_data_2 = major_sorted_data[2];
    assign major_sorted_data_3 = major_sorted_data[3];
    assign major_sorted_data_4 = major_sorted_data[4];
    assign major_sorted_data_5 = major_sorted_data[5];
    assign major_sorted_data_6 = major_sorted_data[6];
    assign major_sorted_data_7 = major_sorted_data[7];
    
    assign major_sorted_idx_0 = major_sorted_indices[0];
    assign major_sorted_idx_1 = major_sorted_indices[1];
    assign major_sorted_idx_2 = major_sorted_indices[2];
    assign major_sorted_idx_3 = major_sorted_indices[3];
    assign major_sorted_idx_4 = major_sorted_indices[4];
    assign major_sorted_idx_5 = major_sorted_indices[5];
    assign major_sorted_idx_6 = major_sorted_indices[6];
    assign major_sorted_idx_7 = major_sorted_indices[7];

    genvar idx;
    generate
        for (idx = 0; idx < 8; idx = idx + 1) begin : byte_sorters
            idx_sorted_32to4 byte_sort (
                .clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
                .unsorted_data(data_array[idx]),
                .search_key(search_key), .xmask(xmask),
                .sorted_data(sorted_bytes[idx]),
                .match_lines(dummy_match[idx]),
                .done(done_bytes[idx]),
                .sorted_indices(byte_indices[idx]),
                .unsorted_indices(dummy_unsorted)
            );
        end
    endgenerate

        idx_sorted_32to4 sorter0 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
             .unsorted_data(major0), .search_key(search_key), .xmask(xmask),
             .sorted_data(major_sorted_data[0]), .match_lines(major_sort_match[0]),
             .done(major_sort_done[0]), .sorted_indices(major_sorted_indices[0]),
             .unsorted_indices(dummy_unsorted));
            
        idx_sorted_32to4 sorter1 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
            .unsorted_data(major1), .search_key(search_key), .xmask(xmask),
            .sorted_data(major_sorted_data[1]), .match_lines(major_sort_match[1]),
            .done(major_sort_done[1]), .sorted_indices(major_sorted_indices[1]),
            .unsorted_indices(dummy_unsorted));
        
        idx_sorted_32to4 sorter2 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
            .unsorted_data(major2), .search_key(search_key), .xmask(xmask),
            .sorted_data(major_sorted_data[2]), .match_lines(major_sort_match[2]),
            .done(major_sort_done[2]), .sorted_indices(major_sorted_indices[2]),
            .unsorted_indices(dummy_unsorted));
        
        idx_sorted_32to4 sorter3 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
            .unsorted_data(major3), .search_key(search_key), .xmask(xmask),
            .sorted_data(major_sorted_data[3]), .match_lines(major_sort_match[3]),
            .done(major_sort_done[3]), .sorted_indices(major_sorted_indices[3]),
            .unsorted_indices(dummy_unsorted));
            
        idx_sorted_32to4 sorter4 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
            .unsorted_data(major4), .search_key(search_key), .xmask(xmask),
            .sorted_data(major_sorted_data[4]), .match_lines(major_sort_match[4]),
            .done(major_sort_done[4]), .sorted_indices(major_sorted_indices[4]),
            .unsorted_indices(dummy_unsorted));
                    
        idx_sorted_32to4 sorter5 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
            .unsorted_data(major5), .search_key(search_key), .xmask(xmask),
            .sorted_data(major_sorted_data[5]), .match_lines(major_sort_match[5]),
            .done(major_sort_done[5]), .sorted_indices(major_sorted_indices[5]),
            .unsorted_indices(dummy_unsorted));
        
        idx_sorted_32to4 sorter6 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
            .unsorted_data(major6), .search_key(search_key), .xmask(xmask),
            .sorted_data(major_sorted_data[6]), .match_lines(major_sort_match[6]),
            .done(major_sort_done[6]), .sorted_indices(major_sorted_indices[6]),
            .unsorted_indices(dummy_unsorted));
        
        idx_sorted_32to4 sorter7 (.clk(clk), .rst(rst), .start(state == WAIT_BYTE_SORT),
            .unsorted_data(major7), .search_key(search_key), .xmask(xmask),
            .sorted_data(major_sorted_data[7]), .match_lines(major_sort_match[7]),
            .done(major_sort_done[7]), .sorted_indices(major_sorted_indices[7]),
            .unsorted_indices(dummy_unsorted));

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            sorted_data <= 0;
            sorted_indices <= 0;
            memory_out <= 0;
            byte_sorted_data <= 0;
            byte_sorted_indices <= 0;
            done <= 0;
            compare_idx <= 0;
            pass_count <= 0;
            state <= IDLE;
        end else begin
            case (state)
                IDLE: begin
                    done <= 0;
                    if (start) state <= LOAD;
                end
                LOAD: begin
                    data_array[0] <= unsorted_data[31:0];
                    data_array[1] <= unsorted_data[63:32];
                    data_array[2] <= unsorted_data[95:64];
                    data_array[3] <= unsorted_data[127:96];
                    data_array[4] <= unsorted_data[159:128];
                    data_array[5] <= unsorted_data[191:160];
                    data_array[6] <= unsorted_data[223:192];
                    data_array[7] <= unsorted_data[255:224];
                    index_array[0] <= 3'd0;
                    index_array[1] <= 3'd1;
                    index_array[2] <= 3'd2;
                    index_array[3] <= 3'd3;
                    index_array[4] <= 3'd4;
                    index_array[5] <= 3'd5;
                    index_array[6] <= 3'd6;
                    index_array[7] <= 3'd7;
                    compare_idx <= 0;
                    pass_count <= 0;
                    state <= SORT;
                end
                SORT: begin
                    if (compare_idx < 7) begin
                        if (compare_words(data_array[compare_idx], data_array[compare_idx + 1])) begin
                            temp = data_array[compare_idx];
                            data_array[compare_idx] = data_array[compare_idx + 1];
                            data_array[compare_idx + 1] = temp;

                            temp_index = index_array[compare_idx];
                            index_array[compare_idx] = index_array[compare_idx + 1];
                            index_array[compare_idx + 1] = temp_index;
                        end
                        compare_idx <= compare_idx + 1;
                    end else begin
                        compare_idx <= 0;
                        pass_count <= pass_count + 1;
                        if (pass_count >= 7) state <= WAIT_BYTE_SORT;
                    end
                end
                WAIT_BYTE_SORT: begin
                    sorted_data <= {data_array[7],data_array[6],data_array[5],data_array[4],data_array[3], data_array[2], data_array[1], data_array[0]};
                    sorted_indices <= {index_array[7],index_array[6],index_array[5],index_array[4],index_array[3], index_array[2], index_array[1], index_array[0]};
                    memory[0] <= data_array[0];
                    memory[1] <= data_array[1];
                    memory[2] <= data_array[2];
                    memory[3] <= data_array[3];
                    memory[4] <= data_array[4];
                    memory[5] <= data_array[5];
                    memory[6] <= data_array[6];
                    memory[7] <= data_array[7];
                    memory_out <= {memory[7],memory[6],memory[5],memory[4],memory[3], memory[2], memory[1], memory[0]};

                    major0 <= {data_array[0][31:28], data_array[1][31:28], data_array[2][31:28], data_array[3][31:28], data_array[4][31:28], data_array[5][31:28], data_array[6][31:28], data_array[7][31:28]};
                    major1 <= {data_array[0][27:24], data_array[1][27:24], data_array[2][27:24], data_array[3][27:24], data_array[4][27:24], data_array[5][27:24], data_array[6][27:24], data_array[7][27:24]};
                    major2 <= {data_array[0][23:20], data_array[1][23:20], data_array[2][23:20], data_array[3][23:20], data_array[4][23:20], data_array[5][23:20], data_array[6][23:20], data_array[7][23:20]};
                    major3 <= {data_array[0][19:16], data_array[1][19:16], data_array[2][19:16], data_array[3][19:16],data_array[4][19:16], data_array[5][19:16], data_array[6][19:16], data_array[7][19:16]};
                    major4 <= {data_array[0][15:12], data_array[1][15:12], data_array[2][15:12], data_array[3][15:12],data_array[4][15:12], data_array[5][15:12], data_array[6][15:12], data_array[7][15:12]};
                    major5 <= {data_array[0][11:8], data_array[1][11:8], data_array[2][11:8], data_array[3][11:8],data_array[4][11:8], data_array[5][11:8], data_array[6][11:8], data_array[7][11:8]};
                    major6 <= {data_array[0][7:4], data_array[1][7:4], data_array[2][7:4], data_array[3][7:4],data_array[4][7:4], data_array[5][7:4], data_array[6][7:4], data_array[7][7:4]};
                    major7 <= {data_array[0][3:0], data_array[1][3:0], data_array[2][3:0], data_array[3][3:0],data_array[4][3:0], data_array[5][3:0], data_array[6][3:0], data_array[7][3:0]};

                    if (&done_bytes && &major_sort_done) begin
                        byte_sorted_data <= {major_sorted_data_0, major_sorted_data_1, major_sorted_data_2, major_sorted_data_3,major_sorted_data_4,major_sorted_data_5,major_sorted_data_6,major_sorted_data_7};
                        byte_sorted_indices <= {byte_indices[7],byte_indices[6],byte_indices[5],byte_indices[4],byte_indices[3], byte_indices[2], byte_indices[1], byte_indices[0]};
                        done <= 1;
                        state <= IDLE;
                    end
                end
            endcase
        end
    end
endmodule
